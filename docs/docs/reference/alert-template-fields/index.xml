<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Butler – Alert template fields</title>
    <link>https://butler.ptarmiganlabs.com/docs/reference/alert-template-fields/</link>
    <description>Recent content in Alert template fields on Butler</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    
	  <atom:link href="https://butler.ptarmiganlabs.com/docs/reference/alert-template-fields/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: Alert template fields for failed/aborted reload tasks</title>
      <link>https://butler.ptarmiganlabs.com/docs/reference/alert-template-fields/reload-tasks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://butler.ptarmiganlabs.com/docs/reference/alert-template-fields/reload-tasks/</guid>
      <description>
        
        
        &lt;h2 id=&#34;template-fields&#34;&gt;Template fields&lt;/h2&gt;
&lt;p&gt;Butler uses the &lt;a href=&#34;https://handlebarsjs.com/&#34;&gt;Handlebars&lt;/a&gt; library for templating work.&lt;/p&gt;
&lt;p&gt;Handlebars offers a lot of useful features (nested template fields, evaluation context, template comments) and it&amp;rsquo;s recommended that you browse through at least the &lt;a href=&#34;https://handlebarsjs.com/guide/#installation&#34;&gt;language features&lt;/a&gt; section of their getting started guide to get a feeling for what&amp;rsquo;s possible.&lt;/p&gt;


&lt;div class=&#34;alert alert-warning&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;Warning&lt;/h4&gt;

    &lt;p&gt;Only some alert destinations support template files, namely&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Email&lt;/li&gt;
&lt;li&gt;Teams&lt;/li&gt;
&lt;li&gt;Slack&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Please see the &lt;a href=&#34;https://butler.ptarmiganlabs.com/docs/concepts&#34;&gt;Concepts&lt;/a&gt; and &lt;a href=&#34;https://butler.ptarmiganlabs.com/docs/getting-started/setup/reload-alerts&#34;&gt;Getting started&lt;/a&gt; sections for more information about which alert types support templates.&lt;/p&gt;


&lt;/div&gt;

&lt;p&gt;If a template field is used for an alert type where that field is not supported, the field will simply be blank. No errors will occur.&lt;/p&gt;
&lt;p&gt;The following template fields are available in alert messages.&lt;/p&gt;
&lt;p&gt;Note that some fields are usually (always?) empty, for example the script log for stopped messages.&lt;br&gt;
This is simply how Sense works - the template fields just forward the information retrieved from the Sense APIs.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Failed&lt;br&gt;reload&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Stopped&lt;br&gt;reload&lt;/th&gt;
&lt;th&gt;Field name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;✅&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;✅&lt;/td&gt;
&lt;td&gt;hostName&lt;/td&gt;
&lt;td&gt;Server on which a reload or other event took place.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;✅&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;✅&lt;/td&gt;
&lt;td&gt;user&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Reload failures:&lt;/strong&gt; User ID for use doing the reload. Typically &lt;code&gt;sa_scheduler&lt;/code&gt;.&lt;br&gt;&lt;strong&gt;Reload stopped:&lt;/strong&gt; User ID of user stopping the reload.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;✅&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;✅&lt;/td&gt;
&lt;td&gt;taskId&lt;/td&gt;
&lt;td&gt;ID of reload task that failed/was stopped.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;✅&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;✅&lt;/td&gt;
&lt;td&gt;appName&lt;/td&gt;
&lt;td&gt;Name of Sense whose reload failed/was stopped.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;✅&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;✅&lt;/td&gt;
&lt;td&gt;appId&lt;/td&gt;
&lt;td&gt;ID of Sense app whose reload failed/was stopped.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;✅&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;✅&lt;/td&gt;
&lt;td&gt;appOwnerName&lt;/td&gt;
&lt;td&gt;Name of app owner (if this is available in the metadata provided by the Sense server)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;✅&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;✅&lt;/td&gt;
&lt;td&gt;appOwnerUserDirectory&lt;/td&gt;
&lt;td&gt;App owner user&amp;rsquo;s user directory (if this is available in the metadata provided by the Sense server)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;✅&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;✅&lt;/td&gt;
&lt;td&gt;appOwnerUserId&lt;/td&gt;
&lt;td&gt;App owner user&amp;rsquo;s user id (if this is available in the metadata provided by the Sense server)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;✅&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;✅&lt;/td&gt;
&lt;td&gt;appOwnerEmail&lt;/td&gt;
&lt;td&gt;App owner email (if this is available in the metadata provided by the Sense server)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;✅&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;✅&lt;/td&gt;
&lt;td&gt;logTimeStamp&lt;/td&gt;
&lt;td&gt;Timestamp as recorded in the Sense logs&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;✅&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;✅&lt;/td&gt;
&lt;td&gt;logLevel&lt;/td&gt;
&lt;td&gt;Log level of the Sense log file entry causing the alert&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;✅&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;✅&lt;/td&gt;
&lt;td&gt;logMessage&lt;/td&gt;
&lt;td&gt;Log message from the Sense log files&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;✅&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;✅&lt;/td&gt;
&lt;td&gt;executingNodeName&lt;/td&gt;
&lt;td&gt;Name of the server where the reload took place&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;✅&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;✅&lt;/td&gt;
&lt;td&gt;executionDuration.hours&lt;/td&gt;
&lt;td&gt;executionDuration is a JSON object.&lt;br&gt;Duration of reload (hours part)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;✅&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;✅&lt;/td&gt;
&lt;td&gt;executionDuration.minutes&lt;/td&gt;
&lt;td&gt;Duration of reload (minutes part)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;✅&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;✅&lt;/td&gt;
&lt;td&gt;executionDuration.seconds&lt;/td&gt;
&lt;td&gt;Duration of reload (seconds part)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;✅&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;✅&lt;/td&gt;
&lt;td&gt;executionStartTime.startTimeUTC&lt;/td&gt;
&lt;td&gt;JSON object.&lt;br&gt;UTC timestamp for reload start&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;✅&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;✅&lt;/td&gt;
&lt;td&gt;executionStartTime.startTimeLocal1&lt;/td&gt;
&lt;td&gt;Reload start timestamp, format 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;✅&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;✅&lt;/td&gt;
&lt;td&gt;executionStartTime.startTimeLocal2&lt;/td&gt;
&lt;td&gt;Reload start timestamp, format 2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;✅&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;✅&lt;/td&gt;
&lt;td&gt;executionStartTime.startTimeLocal3&lt;/td&gt;
&lt;td&gt;Reload start timestamp, format 3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;✅&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;✅&lt;/td&gt;
&lt;td&gt;executionStartTime.startTimeLocal4&lt;/td&gt;
&lt;td&gt;Reload start timestamp, format 4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;✅&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;✅&lt;/td&gt;
&lt;td&gt;executionStartTime.startTimeLocal5&lt;/td&gt;
&lt;td&gt;Reload start timestamp, format 5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;✅&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;✅&lt;/td&gt;
&lt;td&gt;executionStopTime.stopTimeUTC&lt;/td&gt;
&lt;td&gt;JSON object.&lt;br&gt;UTC timestamp for reload end&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;✅&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;✅&lt;/td&gt;
&lt;td&gt;executionStopTime.stopTimeLocal1&lt;/td&gt;
&lt;td&gt;Reload end timestamp, format 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;✅&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;✅&lt;/td&gt;
&lt;td&gt;executionStopTime.stopTimeLocal2&lt;/td&gt;
&lt;td&gt;Reload end timestamp, format 2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;✅&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;✅&lt;/td&gt;
&lt;td&gt;executionStopTime.stopTimeLocal3&lt;/td&gt;
&lt;td&gt;Reload end timestamp, format 3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;✅&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;✅&lt;/td&gt;
&lt;td&gt;executionStopTime.stopTimeLocal4&lt;/td&gt;
&lt;td&gt;Reload end timestamp, format 4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;✅&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;✅&lt;/td&gt;
&lt;td&gt;executionStopTime.stopTimeLocal5&lt;/td&gt;
&lt;td&gt;Reload end timestamp, format 5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;✅&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;✅&lt;/td&gt;
&lt;td&gt;executionStatusNum&lt;/td&gt;
&lt;td&gt;Final reload task status code&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;✅&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;✅&lt;/td&gt;
&lt;td&gt;executionStatusText&lt;/td&gt;
&lt;td&gt;Final reload task status message&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;✅&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;✅&lt;/td&gt;
&lt;td&gt;executionDetails[].timestampUTC&lt;/td&gt;
&lt;td&gt;executionDetails is an array of status updates for the reload task, similar to the one found in the QMC&amp;rsquo;s task view.&lt;br&gt;UTC timestamp of the task status&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;✅&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;✅&lt;/td&gt;
&lt;td&gt;executionDetails[].timestampLocal1&lt;/td&gt;
&lt;td&gt;Task status timestamp, format 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;✅&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;✅&lt;/td&gt;
&lt;td&gt;executionDetails[].timestampLocal2&lt;/td&gt;
&lt;td&gt;Task status timestamp, format 2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;✅&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;✅&lt;/td&gt;
&lt;td&gt;executionDetails[].timestampLocal3&lt;/td&gt;
&lt;td&gt;Task status timestamp, format 3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;✅&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;✅&lt;/td&gt;
&lt;td&gt;executionDetails[].timestampLocal4&lt;/td&gt;
&lt;td&gt;Task status timestamp, format 4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;✅&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;✅&lt;/td&gt;
&lt;td&gt;executionDetails[].timestampLocal5&lt;/td&gt;
&lt;td&gt;Task status timestamp, format 5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;✅&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;✅&lt;/td&gt;
&lt;td&gt;executionDetails[].detailsType&lt;/td&gt;
&lt;td&gt;Task status timestamp, format 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;✅&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;✅&lt;/td&gt;
&lt;td&gt;executionDetails[].message&lt;/td&gt;
&lt;td&gt;Task status message&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;✅&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;✅&lt;/td&gt;
&lt;td&gt;scriptLogHeadCount&lt;/td&gt;
&lt;td&gt;Number of lines extracted from the start of the script log&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;✅&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;✅&lt;/td&gt;
&lt;td&gt;scriptLogHead&lt;/td&gt;
&lt;td&gt;The first x lines from the reload&amp;rsquo;s script log&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;✅&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;✅&lt;/td&gt;
&lt;td&gt;scriptLogTail&lt;/td&gt;
&lt;td&gt;Number of lines extracted from the end of the script log&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;✅&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;✅&lt;/td&gt;
&lt;td&gt;scriptLogTailCount&lt;/td&gt;
&lt;td&gt;The first y lines from the reload&amp;rsquo;s script log&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;✅&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;✅&lt;/td&gt;
&lt;td&gt;qliksSenseQMC&lt;/td&gt;
&lt;td&gt;Links to QMC, as defined in main config file&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;✅&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;✅&lt;/td&gt;
&lt;td&gt;qliksSenseHub&lt;/td&gt;
&lt;td&gt;Links to Hub, as defined in main config file&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Alert template fields for Windows services events</title>
      <link>https://butler.ptarmiganlabs.com/docs/reference/alert-template-fields/windows-services/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://butler.ptarmiganlabs.com/docs/reference/alert-template-fields/windows-services/</guid>
      <description>
        
        
        &lt;h2 id=&#34;email-slack-and-teams&#34;&gt;Email, Slack and Teams&lt;/h2&gt;
&lt;p&gt;Butler uses the &lt;a href=&#34;https://handlebarsjs.com/&#34;&gt;Handlebars&lt;/a&gt; library for templating work.&lt;br&gt;
This gives a lot of flexibility in how alert messages are formatted for the destination types that support template fields.&lt;/p&gt;
&lt;p&gt;Handlebars offers a lot of useful features (nested template fields, evaluation context, template comments) and it&amp;rsquo;s recommended that you browse through at least the &lt;a href=&#34;https://handlebarsjs.com/guide/#installation&#34;&gt;language features&lt;/a&gt; section of their getting started guide to get a feeling for what&amp;rsquo;s possible.&lt;/p&gt;


&lt;div class=&#34;alert alert-warning&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;Warning&lt;/h4&gt;

    &lt;p&gt;Not all alert destinations (MQTT, outgoing webhooks etc) support template fields.&lt;/p&gt;
&lt;p&gt;Please see the &lt;a href=&#34;https://butler.ptarmiganlabs.com/docs/getting-started/setup/reload-alerts&#34;&gt;Getting started&lt;/a&gt; sections for more information on how to set up alerts for each destination.&lt;/p&gt;


&lt;/div&gt;

&lt;p&gt;If a template field is used for an alert type where that field is not supported, the field will simply be blank. No errors will occur.&lt;/p&gt;
&lt;p&gt;The following alert destinations support template fields:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://butler.ptarmiganlabs.com/docs/getting-started/setup/windows-service-monitor/email/&#34;&gt;Email&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://butler.ptarmiganlabs.com/docs/getting-started/setup/windows-service-monitor/slack/&#34;&gt;Slack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://butler.ptarmiganlabs.com/docs/getting-started/setup/windows-service-monitor/teams/&#34;&gt;Teams&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The following template fields are available in alert messages.&lt;/p&gt;
&lt;p&gt;Note that some fields are usually (always?) empty, for example the script log for stopped messages.&lt;br&gt;
This is simply how Sense works - the template fields just forward the information retrieved from the Sense APIs.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Email&lt;/th&gt;
&lt;th&gt;Slack&lt;/th&gt;
&lt;th&gt;Teams&lt;/th&gt;
&lt;th&gt;Field name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;&lt;code&gt;{{host}}&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The hostname of the server where the service is running&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;&lt;code&gt;{{serviceStatus}}&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The status of the service, e.g. &lt;code&gt;RUNNING&lt;/code&gt; or &lt;code&gt;STOPPED&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;&lt;code&gt;{{servicePrevStatus}}&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The previous status of the service, e.g. &lt;code&gt;RUNNING&lt;/code&gt; or &lt;code&gt;STOPPED&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;&lt;code&gt;{{serviceName}}&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The name of the service as defined in Windows&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;&lt;code&gt;{{serviceDisplayName}}&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The display name of the service as defined in Windows. Can sometimes be a bit more human readable than the serviceName.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;&lt;code&gt;{{serviceFriendlyName}}&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The display name of the service as defined in the Butler config file. Used to give the service a good name when both serviceName and serviceDisplayName are unsuitable for use in for example Grafana dashboards.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;&lt;code&gt;{{serviceStartType}}&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The startup mode of the service, e.g. &lt;code&gt;Automatic&lt;/code&gt; or &lt;code&gt;Manual&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;&lt;code&gt;{{serviceExePath}}&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The path to the executable of the service&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;influxdb&#34;&gt;InfluxDB&lt;/h2&gt;
&lt;p&gt;Window service data will be stored in the InfluxDB database specified in the config file &lt;code&gt;Butler.influxdb.dbName&lt;/code&gt; setting.&lt;/p&gt;
&lt;p&gt;The latest status of each service will be stored in the &lt;code&gt;butler_windows_services&lt;/code&gt; measurement &lt;em&gt;every time&lt;/em&gt; Butler checks the status of the service, i.e. not only when the service changes status.&lt;/p&gt;
&lt;h3 id=&#34;fieldsmetrics&#34;&gt;Fields/metrics&lt;/h3&gt;
&lt;p&gt;The following metrics will be stored in a measurement named &lt;code&gt;win_service_state&lt;/code&gt;, for each Windows service:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Field name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;state_num&lt;/td&gt;
&lt;td&gt;A numeric representation of the Windows service&amp;rsquo;s current state.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;state_text&lt;/td&gt;
&lt;td&gt;The Windows service&amp;rsquo;s current state (textual representation).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;startup_mode_num&lt;/td&gt;
&lt;td&gt;A numeric representation of the Windows service&amp;rsquo;s startup mode.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;startup_mode_text&lt;/td&gt;
&lt;td&gt;The Windows service&amp;rsquo;s startup mode (textual representation).&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Mapping of &lt;code&gt;state_num&lt;/code&gt; to &lt;code&gt;state_text&lt;/code&gt;:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;state_num&lt;/th&gt;
&lt;th&gt;state_text&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;STOPPED&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;START_PENDING&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;STOP_PENDING&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;RUNNING&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;CONTINUE_PENDING&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;PAUSE_PENDING&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;PAUSED&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Mapping of &lt;code&gt;startup_mode_num&lt;/code&gt; to &lt;code&gt;startup_mode_text&lt;/code&gt;:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;startup_mode_num&lt;/th&gt;
&lt;th&gt;startup_mode_text&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;Automatic&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;Automatic (delayed start)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;Manual&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;Disabled&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;tags&#34;&gt;Tags&lt;/h3&gt;
&lt;p&gt;The following tags will be attached to all Windows service data stored in InfluxDB:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Tag name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;butler_instance&lt;/td&gt;
&lt;td&gt;The value in &lt;code&gt;Butler.influxDb.instanceTag&lt;/code&gt;. Can be used to differentiate several Butler instances running in parallel.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;host&lt;/td&gt;
&lt;td&gt;Host name where the Windows service is running. Comes from &lt;code&gt;Butler.serviceMonitor.monitor.&amp;lt;host&amp;gt;&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;service_name&lt;/td&gt;
&lt;td&gt;The name of the Windows service, as defined in Windows.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;service_display_name&lt;/td&gt;
&lt;td&gt;The display name of the Windows service, as defined in Windows.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;service_friendly_name&lt;/td&gt;
&lt;td&gt;The friendly name of the Windows service, as defined in the Butler config file &lt;code&gt;Butler.serviceMonitor.monitor.&amp;lt;host&amp;gt;.services.&amp;lt;friendlyName&amp;gt;&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;new-relic&#34;&gt;New Relic&lt;/h2&gt;
&lt;p&gt;Butler will create New Relic events and/or log entries when a monitored Windows service changes state, for example from &lt;code&gt;RUNNING&lt;/code&gt; to &lt;code&gt;STOPPED&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;events&#34;&gt;Events&lt;/h3&gt;
&lt;p&gt;Events sent to New Relic will have these attributes attached:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Attribute name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;eventType&lt;/td&gt;
&lt;td&gt;Always set to &lt;code&gt;qs_serviceStateEvent&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;butler_serviceHost&lt;/td&gt;
&lt;td&gt;The host name where the Windows service is running. Comes from &lt;code&gt;Butler.serviceMonitor.monitor.&amp;lt;host&amp;gt;&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;butler_serviceName&lt;/td&gt;
&lt;td&gt;The name of the Windows service, as defined in Windows.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;butler_serviceDisplayName&lt;/td&gt;
&lt;td&gt;The display name of the Windows service, as defined in Windows.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;butler_serviceStatus&lt;/td&gt;
&lt;td&gt;The status of the Windows service, e.g. &lt;code&gt;RUNNING&lt;/code&gt; or &lt;code&gt;STOPPED&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;hellip;&lt;/td&gt;
&lt;td&gt;Any static and dynamic attributes defined in &lt;code&gt;Butler.incidentTool.newRelic.serviceMonitor.destination.event.attribute&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;hellip;&lt;/td&gt;
&lt;td&gt;Any static attributes defined in &lt;code&gt;Butler.incidentTool.newRelic.serviceMonitor.sharedSettings.attribute.static&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;log-entries&#34;&gt;Log entries&lt;/h3&gt;
&lt;p&gt;Log entries sent to New Relic will have these attributes attached:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Attribute name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;logType&lt;/td&gt;
&lt;td&gt;Always set to &lt;code&gt;qs_serviceStateLog&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;butler_serviceHost&lt;/td&gt;
&lt;td&gt;The host name where the Windows service is running. Comes from &lt;code&gt;Butler.serviceMonitor.monitor.&amp;lt;host&amp;gt;&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;butler_serviceName&lt;/td&gt;
&lt;td&gt;The name of the Windows service, as defined in Windows.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;butler_serviceDisplayName&lt;/td&gt;
&lt;td&gt;The display name of the Windows service, as defined in Windows.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;butler_serviceStatus&lt;/td&gt;
&lt;td&gt;The status of the Windows service, e.g. &lt;code&gt;RUNNING&lt;/code&gt; or &lt;code&gt;STOPPED&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;hellip;&lt;/td&gt;
&lt;td&gt;Any static and dynamic attributes defined in &lt;code&gt;Butler.incidentTool.newRelic.serviceMonitor.destination.log.attribute&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;hellip;&lt;/td&gt;
&lt;td&gt;Any static attributes defined in &lt;code&gt;Butler.incidentTool.newRelic.serviceMonitor.sharedSettings.attribute.static&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The log message will be one of the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;ldquo;Windows service &lt;serviceDisplayName&gt; on host &lt;serviceHost&gt; is RUNNING.&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Windows service &lt;serviceDisplayName&gt; on host &lt;serviceHost&gt; is STOPPED.&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Windows service &lt;serviceDisplayName&gt; on host &lt;serviceHost&gt; is in state START_PENDING.&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Windows service &lt;serviceDisplayName&gt; on host &lt;serviceHost&gt; is in state STOP_PENDING.&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Windows service &lt;serviceDisplayName&gt; on host &lt;serviceHost&gt; is in state CONTINUE_PENDING.&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Windows service &lt;serviceDisplayName&gt; on host &lt;serviceHost&gt; is in state PAUSE_PENDING.&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Windows service &lt;serviceDisplayName&gt; on host &lt;serviceHost&gt; is in state PAUSED.&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;mqtt&#34;&gt;MQTT&lt;/h2&gt;
&lt;p&gt;Similar to how InfluxDB works, Butler will send an MQTT message to the topic specified in &lt;code&gt;Butler.mqttConfig.serviceStatusTopic&lt;/code&gt; every time it checks the status of a Windows service, i.e. not only when the service changes status.&lt;/p&gt;
&lt;p&gt;Butler will ALSO send an MQTT message to the topics specified in &lt;code&gt;Butler.mqttConfig.serviceRunningTopic&lt;/code&gt; and &lt;code&gt;Butler.mqttConfig.serviceStoppedTopic&lt;/code&gt; when a Windows service is stopped or started.&lt;/p&gt;
&lt;p&gt;Message payload for continuously sent messages is a JSON object with these properties:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Property name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;host&lt;/td&gt;
&lt;td&gt;The host name where the Windows service is running. Comes from &lt;code&gt;Butler.serviceMonitor.monitor.&amp;lt;host&amp;gt;&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;serviceName&lt;/td&gt;
&lt;td&gt;The name of the Windows service, as defined in Windows.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;serviceFriendlyName&lt;/td&gt;
&lt;td&gt;The friendly name of the Windows service, as defined in the Butler config file &lt;code&gt;Butler.serviceMonitor.monitor.&amp;lt;host&amp;gt;.services.&amp;lt;friendlyName&amp;gt;&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;serviceStatus&lt;/td&gt;
&lt;td&gt;The status of the Windows service, e.g. &lt;code&gt;RUNNING&lt;/code&gt; or &lt;code&gt;STOPPED&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;serviceDetails&lt;/td&gt;
&lt;td&gt;The details of the Windows service, e.g. &lt;code&gt;RUNNING&lt;/code&gt; or &lt;code&gt;STOPPED&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Message payload for start/stop messages is a JSON object with these properties:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Property name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;host&lt;/td&gt;
&lt;td&gt;The host name where the Windows service is running. Comes from &lt;code&gt;Butler.serviceMonitor.monitor.&amp;lt;host&amp;gt;&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;serviceName&lt;/td&gt;
&lt;td&gt;The name of the Windows service, as defined in Windows.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;serviceFriendlyName&lt;/td&gt;
&lt;td&gt;The friendly name of the Windows service, as defined in the Butler config file &lt;code&gt;Butler.serviceMonitor.monitor.&amp;lt;host&amp;gt;.services.&amp;lt;friendlyName&amp;gt;&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;serviceStatus&lt;/td&gt;
&lt;td&gt;The status of the Windows service, e.g. &lt;code&gt;RUNNING&lt;/code&gt; or &lt;code&gt;STOPPED&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;serviceDetails&lt;/td&gt;
&lt;td&gt;The details of the Windows service, e.g. &lt;code&gt;RUNNING&lt;/code&gt; or &lt;code&gt;STOPPED&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;prevState&lt;/td&gt;
&lt;td&gt;The previous state of the Windows service, e.g. &lt;code&gt;RUNNING&lt;/code&gt; or &lt;code&gt;STOPPED&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;currState&lt;/td&gt;
&lt;td&gt;The current state of the Windows service, e.g. &lt;code&gt;RUNNING&lt;/code&gt; or &lt;code&gt;STOPPED&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;stateChanged&lt;/td&gt;
&lt;td&gt;&lt;code&gt;true&lt;/code&gt; if the Windows service changed state, &lt;code&gt;false&lt;/code&gt; if not.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;outbound-webhooks&#34;&gt;Outbound webhooks&lt;/h2&gt;
&lt;p&gt;Outbound webhooks (=http calls) are sent when a Windows service changes state, for example from &lt;code&gt;RUNNING&lt;/code&gt; to &lt;code&gt;STOPPED&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The payload for PUT and POST http calls is sent in the message body as a JSON object with these properties:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Property name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;event&lt;/td&gt;
&lt;td&gt;Always set to &lt;code&gt;Windows service monitor&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;host&lt;/td&gt;
&lt;td&gt;The host name where the Windows service is running. Comes from &lt;code&gt;Butler.serviceMonitor.monitor.&amp;lt;host&amp;gt;&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;serviceStatus&lt;/td&gt;
&lt;td&gt;The status of the Windows service, e.g. &lt;code&gt;RUNNING&lt;/code&gt; or &lt;code&gt;STOPPED&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;serviceName&lt;/td&gt;
&lt;td&gt;The name of the Windows service, as defined in Windows.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;serviceDisplayName&lt;/td&gt;
&lt;td&gt;The display name of the Windows service, as defined in Windows.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;serviceStartType&lt;/td&gt;
&lt;td&gt;The startup mode of the service, e.g. &lt;code&gt;Automatic&lt;/code&gt; or &lt;code&gt;Manual&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;prevState&lt;/td&gt;
&lt;td&gt;The previous state of the Windows service, e.g. &lt;code&gt;RUNNING&lt;/code&gt; or &lt;code&gt;STOPPED&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;currState&lt;/td&gt;
&lt;td&gt;The current state of the Windows service, e.g. &lt;code&gt;RUNNING&lt;/code&gt; or &lt;code&gt;STOPPED&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;stateChanged&lt;/td&gt;
&lt;td&gt;&lt;code&gt;true&lt;/code&gt; if the Windows service changed state, &lt;code&gt;false&lt;/code&gt; if not.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The payload for GET http calls is sent as query parameters with the same properties as above, but with the  property names being all lowercase letters.&lt;/p&gt;
&lt;p&gt;A typical GET webhook URL would look like this:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;https://mywebhookserver.com?event=Windows service monitor&amp;amp;host=MyHost&amp;amp;servicestatus=RUNNING&amp;amp;servicename=MyService&amp;amp;servicedisplayname=MyServiceDisplayName&amp;amp;servicestarttype=Automatic&amp;amp;prevstate=RUNNING&amp;amp;currstate=STOPPED&amp;amp;statechanged=true
&lt;/code&gt;&lt;/pre&gt;
      </description>
    </item>
    
  </channel>
</rss>
