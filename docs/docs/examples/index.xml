<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Butler – Examples</title>
    <link>/docs/examples/</link>
    <description>Recent content in Examples on Butler</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	  <atom:link href="/docs/examples/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: Swagger UI: Try out the Butler API using the API docs</title>
      <link>/docs/examples/openapi-docs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/examples/openapi-docs/</guid>
      <description>
        
        
        &lt;p&gt;Below are some examples of how Butler&amp;rsquo;s built-in Swagger docs can be used to test-drive the Butler API.&lt;/p&gt;
&lt;h2 id=&#34;openapi-documentation-built-into-butler&#34;&gt;OpenAPI documentation built into Butler&lt;/h2&gt;
&lt;p&gt;The complete documentation for Butler&amp;rsquo;s REST API is built into Butler itself.
This means that its very easy to try out and get familiar with the various API endpoints, without having to create Sense apps for everything you want to try out.&lt;/p&gt;
&lt;p&gt;If Butler&amp;rsquo;s config file contains the settings below, the API will be available at http:192.168.1.168:8080.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#000&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;restServerConfig&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;enable&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;serverHost&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;192.168.1.168&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;serverPort&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;8080&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In addition to the API endpoints, the API documentation will be available at http://192.168.1.168:8080/docs/swagger. Looks like this:&lt;/p&gt;







&lt;div class=&#34;card rounded p-2 td-post-card mb-4 mt-4&#34; style=&#34;max-width: 610px&#34;&gt;
	&lt;img class=&#34;card-img-top&#34; src=&#34;/docs/examples/openapi-docs/openapi-1_hu991cdd886075f51c174b43d04ec8fd5f_405156_600x650_fill_catmullrom_smart1_2.png&#34; width=&#34;600&#34; height=&#34;650&#34;&gt;
	
	&lt;div class=&#34;card-body px-0 pt-2 pb-0&#34;&gt;
		&lt;p class=&#34;card-text&#34;&gt;
&lt;/p&gt;
	&lt;/div&gt;
	
&lt;/div&gt;


&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;Other tools for exploring APIs&lt;/h4&gt;
&lt;p&gt;If the OpenAPI interface to Butler&amp;rsquo;s API feels limited, there are lots of tools dedicated to this task.&lt;br&gt;
Two good ones are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://paw.cloud/&#34;&gt;Paw&lt;/a&gt; is Mac only, costs a bit of money, but is very, very good. Highly recommended.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.postman.com/&#34;&gt;Postman&lt;/a&gt; is also good and cross platform.&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;

&lt;h3 id=&#34;butler-ping&#34;&gt;Butler ping&lt;/h3&gt;
&lt;p&gt;This is the most basic API endpoint of them all. Can be used to verify that Butler is actually running and responding as expected.&lt;/p&gt;
&lt;p&gt;Looks like this. Note the response we get from Butler&amp;rsquo;s API.&lt;/p&gt;
&lt;div class=&#34;embed-responsive embed-responsive-16by9&#34;&gt;
        &lt;iframe src=&#34;https://www.youtube.com/embed/K_1f_hSZ-4k?enablejsapi=1&#34;
                 allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;h3 id=&#34;list-all-enabled-api-endpoints&#34;&gt;List all enabled API endpoints&lt;/h3&gt;
&lt;p&gt;Let&amp;rsquo;s take a look at which API endpoints are &lt;a href=&#34;/docs/reference/config-file/&#34;&gt;enabled in the restServerEndpointsEnable section of the config file&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;embed-responsive embed-responsive-16by9&#34;&gt;
        &lt;iframe src=&#34;https://www.youtube.com/embed/JdOt1aQj9Hw?enablejsapi=1&#34;
                 allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;h3 id=&#34;key-value-pairs-demo-1&#34;&gt;Key-value pairs, demo 1&lt;/h3&gt;
&lt;p&gt;Create and query key-value pairs.&lt;/p&gt;
&lt;div class=&#34;embed-responsive embed-responsive-16by9&#34;&gt;
        &lt;iframe src=&#34;https://www.youtube.com/embed/Vx9MVODo38E?enablejsapi=1&#34;
                 allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;h3 id=&#34;schedules-demo-1&#34;&gt;Schedules, demo 1&lt;/h3&gt;
&lt;p&gt;Create, query, edit and delete task reload schedules using Butler&amp;rsquo;s scheduling API.&lt;/p&gt;
&lt;p&gt;When wathcing the video below, you will notice there are two pre-defined schedules.&lt;br&gt;
One of them fires every 30 seconds and this is also visible in the Butler logs:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;butler-running-schedules-firing-1.png&#34; alt=&#34;alt text&#34; title=&#34;Active user sessions&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;embed-responsive embed-responsive-16by9&#34;&gt;
        &lt;iframe src=&#34;https://www.youtube.com/embed/f-ZSUvXeFmw?enablejsapi=1&#34;
                 allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;h3 id=&#34;list-available-sense-apps-and-extract-them-as-json&#34;&gt;List available Sense apps and extract them as JSON&lt;/h3&gt;
&lt;p&gt;List existing apps on Sense server, then export one of them to JSON.&lt;/p&gt;
&lt;div class=&#34;embed-responsive embed-responsive-16by9&#34;&gt;
        &lt;iframe src=&#34;https://www.youtube.com/embed/vFB0u_eLsJs?enablejsapi=1&#34;
                 allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Flexible scheduling of Sense reload tasks</title>
      <link>/docs/examples/scheduling/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/examples/scheduling/</guid>
      <description>
        
        
        &lt;p&gt;There are many ways to call REST APIs. In this page curl is used, but the same tests can be done using &lt;a href=&#34;https://paw.cloud/&#34;&gt;Paw&lt;/a&gt;, &lt;a href=&#34;https://www.postman.com/&#34;&gt;Postman&lt;/a&gt; and by using the &lt;a href=&#34;https://help.qlik.com/en-US/connectors/Subsystems/REST_connector_help/Content/Connectors_REST/REST-connector.htm&#34;&gt;REST connector&lt;/a&gt; from within Qlik Sense load scripts.&lt;/p&gt;
&lt;p&gt;All the examples assume Butler is exposing it&amp;rsquo;s API on 192.168.1.168:8080.&lt;/p&gt;
&lt;h2 id=&#34;list-all-defined-schedules&#34;&gt;List all defined schedules&lt;/h2&gt;
&lt;p&gt;Looks like there currently are three schedules:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;➜  ~ curl &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;http://192.168.1.168:8080/v4/schedules&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; json_pp
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;100&lt;/span&gt;   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;856&lt;/span&gt;  &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;100&lt;/span&gt;   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;856&lt;/span&gt;    &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;     &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;   167k      &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt; --:--:-- --:--:-- --:--:--  167k
&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;[&lt;/span&gt;
   &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;cronSchedule&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;*/30 * * * * *&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;task-1&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;lastKnownState&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;started&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Every 30 sec&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;qlikSenseTaskId&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;0fe447a9-ba1f-44a9-ac23-68c3a1d88d8b&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;startupState&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;started&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;tags&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;[&lt;/span&gt;
         &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Sales&amp;#34;&lt;/span&gt;,
         &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;abc 123 åäö&amp;#34;&lt;/span&gt;,
         &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Transform&amp;#34;&lt;/span&gt;
      &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;]&lt;/span&gt;,
      &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;timezone&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Europe/Stockholm&amp;#34;&lt;/span&gt;
   &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;,
   &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;cronSchedule&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;0 */2 * * *&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;task-2&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;lastKnownState&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;started&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Every 2 hours&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;qlikSenseTaskId&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;0fe447a9-ba1f-44a9-ac23-68c3a1d88d8b&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;startupState&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;started&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;tags&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;[&lt;/span&gt;
         &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Finance&amp;#34;&lt;/span&gt;,
         &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Extract&amp;#34;&lt;/span&gt;
      &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;]&lt;/span&gt;,
      &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;timezone&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Europe/London&amp;#34;&lt;/span&gt;
   &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;,
   &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;cronSchedule&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;0-30/5 6-18 * * 1-5&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Manually-added-schedule-1&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;lastKnownState&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;started&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Every 5th minute from 0 through 30 past every hour from 6 through 18 on every day-of-week from Monday through Friday&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;qlikSenseTaskId&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;0fe447a9-ba1f-44a9-ac23-68c3a1d88d8b&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;startupState&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;started&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;tags&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;[&lt;/span&gt;
         &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;finance ETL&amp;#34;&lt;/span&gt;,
         &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;weekdays&amp;#34;&lt;/span&gt;
      &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;]&lt;/span&gt;,
      &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;timezone&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Europe/Paris&amp;#34;&lt;/span&gt;
   &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;]&lt;/span&gt;
➜  ~
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;get-a-specific-schedule&#34;&gt;Get a specific schedule&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s take a look at the schedule with id &amp;ldquo;Manually-added-schedule-1&amp;rdquo;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;➜  ~ curl &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;http://192.168.1.168:8080/v4/schedules?id=Manually-added-schedule-1&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; json_pp
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;100&lt;/span&gt;   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;366&lt;/span&gt;  &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;100&lt;/span&gt;   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;366&lt;/span&gt;    &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;     &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;   178k      &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt; --:--:-- --:--:-- --:--:--  178k
&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;
   &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;cronSchedule&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;0-30/5 6-18 * * 1-5&amp;#34;&lt;/span&gt;,
   &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Manually-added-schedule-1&amp;#34;&lt;/span&gt;,
   &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;lastKnownState&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;started&amp;#34;&lt;/span&gt;,
   &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Every 5th minute from 0 through 30 past every hour from 6 through 18 on every day-of-week from Monday through Friday&amp;#34;&lt;/span&gt;,
   &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;qlikSenseTaskId&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;0fe447a9-ba1f-44a9-ac23-68c3a1d88d8b&amp;#34;&lt;/span&gt;,
   &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;startupState&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;started&amp;#34;&lt;/span&gt;,
   &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;tags&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;[&lt;/span&gt;
      &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;finance ETL&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;weekdays&amp;#34;&lt;/span&gt;
   &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;]&lt;/span&gt;,
   &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;timezone&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Europe/Paris&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;
➜  ~
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;add-new-schedule&#34;&gt;Add new schedule&lt;/h2&gt;
&lt;p&gt;Note how we get back information about the newly created schedule. It&amp;rsquo;s the same data that was sent to the API method, with the addition of schedule id, created timestamp and last known state.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;➜  ~ curl -X &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;POST&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;http://192.168.1.168:8080/v4/schedules&amp;#34;&lt;/span&gt; -H &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;Content-Type: application/json&amp;#39;&lt;/span&gt; -d &lt;span style=&#34;color:#4e9a06&#34;&gt;$&amp;#39;{
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;  &amp;#34;timezone&amp;#34;: &amp;#34;Europe/Stockholm&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;  &amp;#34;tags&amp;#34;: [
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;    &amp;#34;tag 1&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;    &amp;#34;abc 123 åäö&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;  ],
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;  &amp;#34;qlikSenseTaskId&amp;#34;: &amp;#34;0fe447a9-ba1f-44a9-ac23-68c3a1d88d8b&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;  &amp;#34;name&amp;#34;: &amp;#34;Every 5 sec&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;  &amp;#34;cronSchedule&amp;#34;: &amp;#34;*/5 * * * * *&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;  &amp;#34;startupState&amp;#34;: &amp;#34;started&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;}&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; json_pp
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;100&lt;/span&gt;   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;544&lt;/span&gt;  &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;100&lt;/span&gt;   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;307&lt;/span&gt;  &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;100&lt;/span&gt;   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;237&lt;/span&gt;  &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;23615&lt;/span&gt;  &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;18230&lt;/span&gt; --:--:-- --:--:-- --:--:-- &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;41846&lt;/span&gt;
&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;
   &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;created&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;2020-10-16T15:23:36.957Z&amp;#34;&lt;/span&gt;,
   &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;cronSchedule&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;*/5 * * * * *&amp;#34;&lt;/span&gt;,
   &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;fb9b16f1-e2cf-4291-8036-24ef90efa300&amp;#34;&lt;/span&gt;,
   &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;lastKnownState&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;started&amp;#34;&lt;/span&gt;,
   &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Every 5 sec&amp;#34;&lt;/span&gt;,
   &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;qlikSenseTaskId&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;0fe447a9-ba1f-44a9-ac23-68c3a1d88d8b&amp;#34;&lt;/span&gt;,
   &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;startupState&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;started&amp;#34;&lt;/span&gt;,
   &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;tags&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;[&lt;/span&gt;
      &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;tag 1&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;abc 123 åäö&amp;#34;&lt;/span&gt;
   &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;]&lt;/span&gt;,
   &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;timezone&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Europe/Stockholm&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;
➜  ~
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Looking in the Butler logs we see that the every-5-seconds schedule with an ID ending in &amp;hellip;a300 indeed fires every 5 seconds:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;butler-logs-new-schedule-1.png&#34; alt=&#34;alt text&#34; title=&#34;New schedule fires every 5 seconds&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;starting-and-stopping-a-schedule&#34;&gt;Starting and stopping a schedule&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s stop the schedule we just created:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;➜  ~ curl -X &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;PUT&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;http://192.168.1.168:8080/v4/schedules/fb9b16f1-e2cf-4291-8036-24ef90efa300/stop&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; json_pp
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;100&lt;/span&gt;   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;309&lt;/span&gt;  &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;100&lt;/span&gt;   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;309&lt;/span&gt;    &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;     &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;  &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;61800&lt;/span&gt;      &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt; --:--:-- --:--:-- --:--:-- &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;61800&lt;/span&gt;
&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;[&lt;/span&gt;
   &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;created&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;2020-10-16T15:23:36.957Z&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;cronSchedule&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;*/5 * * * * *&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;fb9b16f1-e2cf-4291-8036-24ef90efa300&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;lastKnownState&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;stopped&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Every 5 sec&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;qlikSenseTaskId&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;0fe447a9-ba1f-44a9-ac23-68c3a1d88d8b&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;startupState&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;started&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;tags&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;[&lt;/span&gt;
         &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;tag 1&amp;#34;&lt;/span&gt;,
         &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;abc 123 åäö&amp;#34;&lt;/span&gt;
      &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;]&lt;/span&gt;,
      &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;timezone&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Europe/Stockholm&amp;#34;&lt;/span&gt;
   &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;]&lt;/span&gt;
➜  ~
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If we get info about this schedule, it should have &lt;code&gt;lastKnownState&lt;/code&gt;=stopped&amp;hellip; Let&amp;rsquo;s verify.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;➜  ~ curl &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;http://192.168.1.168:8080/v4/schedules?id=fb9b16f1-e2cf-4291-8036-24ef90efa300&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; json_pp
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;100&lt;/span&gt;   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;307&lt;/span&gt;  &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;100&lt;/span&gt;   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;307&lt;/span&gt;    &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;     &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;    99k      &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt; --:--:-- --:--:-- --:--:--   99k
&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;
   &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;created&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;2020-10-16T15:23:36.957Z&amp;#34;&lt;/span&gt;,
   &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;cronSchedule&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;*/5 * * * * *&amp;#34;&lt;/span&gt;,
   &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;fb9b16f1-e2cf-4291-8036-24ef90efa300&amp;#34;&lt;/span&gt;,
   &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;lastKnownState&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;stopped&amp;#34;&lt;/span&gt;,
   &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Every 5 sec&amp;#34;&lt;/span&gt;,
   &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;qlikSenseTaskId&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;0fe447a9-ba1f-44a9-ac23-68c3a1d88d8b&amp;#34;&lt;/span&gt;,
   &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;startupState&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;started&amp;#34;&lt;/span&gt;,
   &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;tags&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;[&lt;/span&gt;
      &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;tag 1&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;abc 123 åäö&amp;#34;&lt;/span&gt;
   &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;]&lt;/span&gt;,
   &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;timezone&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Europe/Stockholm&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;
➜  ~
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Great!&lt;/p&gt;
&lt;p&gt;As a final step, let&amp;rsquo;s start the schedule again, as well as verifying it was successfully started:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;➜  ~ curl -X &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;PUT&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;http://192.168.1.168:8080/v4/schedules/fb9b16f1-e2cf-4291-8036-24ef90efa300/start&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; json_pp
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;100&lt;/span&gt;   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;309&lt;/span&gt;  &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;100&lt;/span&gt;   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;309&lt;/span&gt;    &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;     &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;  &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;77250&lt;/span&gt;      &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt; --:--:-- --:--:-- --:--:-- &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;77250&lt;/span&gt;
&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;[&lt;/span&gt;
   &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;created&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;2020-10-16T15:23:36.957Z&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;cronSchedule&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;*/5 * * * * *&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;fb9b16f1-e2cf-4291-8036-24ef90efa300&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;lastKnownState&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;started&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Every 5 sec&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;qlikSenseTaskId&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;0fe447a9-ba1f-44a9-ac23-68c3a1d88d8b&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;startupState&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;started&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;tags&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;[&lt;/span&gt;
         &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;tag 1&amp;#34;&lt;/span&gt;,
         &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;abc 123 åäö&amp;#34;&lt;/span&gt;
      &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;]&lt;/span&gt;,
      &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;timezone&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Europe/Stockholm&amp;#34;&lt;/span&gt;
   &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;]&lt;/span&gt;
➜  ~ curl &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;http://192.168.1.168:8080/v4/schedules?id=fb9b16f1-e2cf-4291-8036-24ef90efa300&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; json_pp
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;100&lt;/span&gt;   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;307&lt;/span&gt;  &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;100&lt;/span&gt;   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;307&lt;/span&gt;    &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;     &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;   149k      &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt; --:--:-- --:--:-- --:--:--  149k
&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;
   &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;created&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;2020-10-16T15:23:36.957Z&amp;#34;&lt;/span&gt;,
   &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;cronSchedule&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;*/5 * * * * *&amp;#34;&lt;/span&gt;,
   &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;fb9b16f1-e2cf-4291-8036-24ef90efa300&amp;#34;&lt;/span&gt;,
   &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;lastKnownState&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;started&amp;#34;&lt;/span&gt;,
   &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Every 5 sec&amp;#34;&lt;/span&gt;,
   &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;qlikSenseTaskId&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;0fe447a9-ba1f-44a9-ac23-68c3a1d88d8b&amp;#34;&lt;/span&gt;,
   &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;startupState&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;started&amp;#34;&lt;/span&gt;,
   &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;tags&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;[&lt;/span&gt;
      &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;tag 1&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;abc 123 åäö&amp;#34;&lt;/span&gt;
   &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;]&lt;/span&gt;,
   &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;timezone&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Europe/Stockholm&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;
➜  ~
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;All good!&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Reload task chaining with parameters</title>
      <link>/docs/examples/reload-chaining/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/examples/reload-chaining/</guid>
      <description>
        
        
        &lt;h2 id=&#34;reload-chaining-with-parameters-à-la-butler&#34;&gt;Reload chaining with parameters à la Butler&lt;/h2&gt;
&lt;p&gt;First: Some people argue that apps in an ETL chain should be atomic and not pass parameters to each other.&lt;/p&gt;
&lt;p&gt;There is certainly some merit to this view, but there are also cases where you just have to tell the following app(s) what happened in a previous step in the reload chain. Some kind of parameter passing is thus needed.&lt;/p&gt;
&lt;p&gt;Passing parameters between apps in a QMC reload chain can be done in various ways.&lt;/p&gt;
&lt;p&gt;The most common option is to use what&amp;rsquo;s available in Sense out of the box:&lt;br&gt;
Store the parameters in a disk file (CSV, QVD etc) in the first app, then load the parameters back into the second app when it is reloading.&lt;/p&gt;
&lt;p&gt;Butler offers a different approach: Store and manipulate named key-value pairs within Butler, using its REST API.&lt;/p&gt;
&lt;p&gt;It works like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;butler-key-value-store-1.png&#34; alt=&#34;alt text&#34; title=&#34;Passing parameters between Sense apps using Butler&#34;&gt;&lt;/p&gt;
&lt;p&gt;Pretty easy, right?&lt;/p&gt;
&lt;p&gt;One more thing. There is an optional but useful property for each KV pair: TTL, or time-to-live.&lt;/p&gt;
&lt;p&gt;If a ttl is set (in milliseconds) for a KV pair, it will be automatically deleted when the ttl clock expire. This is an easy way to keep the Butler key-value store nice and tidy.&lt;/p&gt;
&lt;h3 id=&#34;data-connections-not-included&#34;&gt;Data connections not included&lt;/h3&gt;
&lt;p&gt;In order to call Butler&amp;rsquo;s REST API you need a couple of REST data connections defined in Qlik Sense. The apps described in this example assumes &lt;code&gt;Butler_Get&lt;/code&gt; and &lt;code&gt;Butler_POST&lt;/code&gt; exists. They look like this:&lt;/p&gt;
&lt;h4 id=&#34;butler_get&#34;&gt;Butler_GET&lt;/h4&gt;
&lt;p&gt;This data connection is trivial. When creating it any REST API that responds to GET requests can be used. Later on (before the calls to the Butler API) the URL will be replaced with the correct one = host:port where Butler is running.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;butler-api-dc-get-1.png&#34; alt=&#34;alt text&#34; title=&#34;GET data connection part &#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;butler_post&#34;&gt;Butler_POST&lt;/h4&gt;
&lt;p&gt;This data connection is a bit more complex.&lt;/p&gt;
&lt;p&gt;First, in order to create the connection you need a REST endpoint that takes a POST with data passed in the body of the message. The data connection used by the apps in this example are found below. Note the http method, the request body and the &lt;code&gt;Content-Type&lt;/code&gt; Query header. Any other settings can be ignored.&lt;/p&gt;
&lt;p&gt;Secondly, Qlik Sense&amp;rsquo;s REST connector only supports GET and POST methods over http. That&amp;rsquo;s fine in this particular case, because we&amp;rsquo;ll use a POST to create a new key-value pair. On a generel levels it&amp;rsquo;s however really quite bad that Qlik&amp;rsquo;s REST connector only supports GET and POST: PUT, DELETE and other http methods are certainly also used out there on the Internet, and should be supported too.&lt;/p&gt;
&lt;p&gt;Some of the Butler API endpoints use PUT or DELETE methods, which is nothing strange at all - rather the opposite. Butler tries to follow best practices when it comes to using GET, POST, PUT and DELETE at the appropriate times.&lt;/p&gt;
&lt;p&gt;We still need a way to invoke PUT and DELETE endpoints from Sense load script.
This is done in the script, by adding an extra http header in the call to Butler&amp;rsquo;s API: &lt;code&gt;X-HTTP-Method-Override&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;If &lt;code&gt;X-HTTP-Method-Override&lt;/code&gt; is set to PUT in the call to Butler&amp;rsquo;s API, the Butler will convert the call to a PUT call before it reaches the message dispatching within Butler. Same thing for DELETEs.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;butler-api-dc-post-1.png&#34; alt=&#34;alt text&#34; title=&#34;POST data connection part 1&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;butler-api-dc-post-2.png&#34; alt=&#34;alt text&#34; title=&#34;POST data connection part 2&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;butler-api-dc-post-3.png&#34; alt=&#34;alt text&#34; title=&#34;POST data connection part 3&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;parameter-passing-in-action&#34;&gt;Parameter passing in action&lt;/h2&gt;
&lt;p&gt;The scenario is as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;App 1 needs to pass a parameter called &amp;ldquo;Paramater 1&amp;rdquo; to App 2&lt;/li&gt;
&lt;li&gt;App 2 is scheduled to reload either directly or in some later stage after App 1.&lt;/li&gt;
&lt;li&gt;App 1 stores the parameter in Butler&amp;rsquo;s key-value store during reload of App 1.&lt;/li&gt;
&lt;li&gt;When App 2 reloads it pulls the parameter from the KV store.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When App 1 reloads the reload window looks like this. Note how the app has created a key-value pair within Butler.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;reload-chain-parameter-app-1-1.png&#34; alt=&#34;alt text&#34; title=&#34;Reload log from App 1, first part of reload chain&#34;&gt;&lt;/p&gt;
&lt;p&gt;App 2 is scheduled to reload when App 1 has finished reloading. Note that we get back the same value that was set by App 1. Mission accomplished.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;reload-chain-parameter-app-2-1.png&#34; alt=&#34;alt text&#34; title=&#34;Reload log from App 2, second part of reload chain&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;qlik-script-for-passing-parameters-between-apps&#34;&gt;Qlik script for passing parameters between apps&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s take a closer look at the two apps. The apps are available in the sense_apps directory of &lt;a href=&#34;https://github.com/ptarmiganlabs/butler&#34;&gt;the Butler repository on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The apps are called &lt;code&gt;Butler 4.0 - Reload chain parameters, app 1.qvf&lt;/code&gt; and &lt;code&gt;Butler 4.0 - Reload chain parameters, app 2.qvf&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;app-1&#34;&gt;App 1&lt;/h3&gt;
&lt;p&gt;The app has three script sections, each is shown below.&lt;/p&gt;
&lt;h4 id=&#34;script-section-1-init&#34;&gt;Script section 1: Init&lt;/h4&gt;
&lt;p&gt;The interesting parts here are the two variables towards the end. These tell the rest of the script where Butler is running.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SET ThousandSep=&#39;,&#39;;
SET DecimalSep=&#39;.&#39;;
SET MoneyThousandSep=&#39;,&#39;;
SET MoneyDecimalSep=&#39;.&#39;;
SET MoneyFormat=&#39;$#,##0.00;-$#,##0.00&#39;;
SET TimeFormat=&#39;h:mm:ss TT&#39;;
SET DateFormat=&#39;M/D/YYYY&#39;;
SET TimestampFormat=&#39;M/D/YYYY h:mm:ss[.fff] TT&#39;;
SET FirstWeekDay=6;
SET BrokenWeeks=1;
SET ReferenceDay=0;
SET FirstMonthOfYear=1;
SET CollationLocale=&#39;en-US&#39;;
SET CreateSearchIndexOnReload=1;
SET MonthNames=&#39;Jan;Feb;Mar;Apr;May;Jun;Jul;Aug;Sep;Oct;Nov;Dec&#39;;
SET LongMonthNames=&#39;January;February;March;April;May;June;July;August;September;October;November;December&#39;;
SET DayNames=&#39;Mon;Tue;Wed;Thu;Fri;Sat;Sun&#39;;
SET LongDayNames=&#39;Monday;Tuesday;Wednesday;Thursday;Friday;Saturday;Sunday&#39;;
SET NumericalAbbreviation=&#39;3:k;6:M;9:G;12:T;15:P;18:E;21:Z;24:Y;-3:m;-6:μ;-9:n;-12:p;-15:f;-18:a;-21:z;-24:y&#39;;


// The Butler instance is running at this IP/port:
let vButlerHost = &#39;192.168.1.168&#39;;
let vButlerPort = &#39;8080&#39;;
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;script-section-2-sub-definitions&#34;&gt;Script section 2: Sub definitions&lt;/h4&gt;
&lt;p&gt;Here we define two subs: One to get a bit more friendly looking trace messages, and one that encapsulates the code needed to store key-value pairs in Butler.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// ------------------------------------------------------------
// ** Time stamped trace messages **
//
// Get nice trace lines in the reload log by calling the line with 
// CALL NiceTrace(&#39;My trace message. Variable value=$(vVariableName)&#39;);
//
// Paramaters:
// vMsg                  : Message sent to reload log
// ------------------------------------------------------------
sub NiceTrace(vMsg)
    let vNow = Now(1);
    TRACE &amp;gt;&amp;gt;&amp;gt; $(vNow): $(vMsg);

    // Clear timestamp variable
    set vNow=;
end sub



// ------------------------------------------------------------
// ** Add key-value pair to a namespace **
//
// Paramaters:
// vNamespace            : Namespace in which the KV pair will be stored
// vKey                  : Key name
// vValue                : Value to store together with key
// vTimeToLive           : How long should the KV pair exist before being automatically deleted?
//                         Set to 0 to disable TTL feature (=no auto-delete of KV pair)
// ------------------------------------------------------------
sub AddKeyValue(vNamespace, vKey, vValue, vTimeToLive)
    LIB CONNECT TO &#39;Butler_POST&#39;;

    if (vTimeToLive&amp;gt;0) then
        let vRequestBody = &#39;{&amp;quot;key&amp;quot;: &amp;quot;$(vKey)&amp;quot;, &amp;quot;value&amp;quot;: &amp;quot;$(vValue)&amp;quot;, &amp;quot;ttl&amp;quot;: &amp;quot;$(vTimeToLive)&amp;quot;}&#39;;
    else
        let vRequestBody = &#39;{&amp;quot;key&amp;quot;: &amp;quot;$(vKey)&amp;quot;, &amp;quot;value&amp;quot;: &amp;quot;$(vValue)&amp;quot;}&#39;;
    end if

    // Escape &amp;quot; in request body 
    let vRequestBody = replace(vRequestBody,&#39;&amp;quot;&#39;, chr(34)&amp;amp;chr(34));

    RestConnectorMasterTable:
    SQL SELECT 
        &amp;quot;namespace&amp;quot;,
        &amp;quot;key&amp;quot;,
        &amp;quot;value&amp;quot;,
        &amp;quot;ttl&amp;quot;
    FROM JSON (wrap on) &amp;quot;root&amp;quot;
    WITH CONNECTION (
    Url &amp;quot;http://$(vButlerHost):$(vButlerPort)/v4/keyvalues/$(vNamespace)&amp;quot;,
    BODY &amp;quot;$(vRequestBody)&amp;quot;,
    HTTPHEADER &amp;quot;Content-Type&amp;quot; &amp;quot;application/json&amp;quot;
    );

    DROP TABLE RestConnectorMasterTable;
end sub
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;script-section-3-write-parameters-to-kv-store&#34;&gt;Script section 3: Write parameters to KV store&lt;/h4&gt;
&lt;p&gt;Finally, the code needed to actually store the parameter in Butler is just a few lines:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// Create key-value pair in Butler&#39;s key-value store. 

Call NiceTrace(&#39;---------------------------&#39;)
Call NiceTrace(&#39;Writing parameter to Butler key-value store. No time-to-live (ttl).&#39;)
Call AddKeyValue(&#39;Reload chain parameter demo&#39;, &#39;Parameter 1&#39;, &#39;a1 abc 123&#39;, 0)

Call NiceTrace(&#39;Written parameter to key-value store: &#39;)
Call NiceTrace(&#39;Namespace=&amp;quot;Reload chain parameter demo&amp;quot;, Key=&amp;quot;Parameter 1&amp;quot;, Value=&amp;quot;a1 abc 123&amp;quot;&#39;)
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;app-2&#34;&gt;App 2&lt;/h3&gt;
&lt;h4 id=&#34;script-section-1-init-1&#34;&gt;Script section 1: Init&lt;/h4&gt;
&lt;p&gt;Set host and port where Butler is running. Exactly the same script as in App 1.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SET ThousandSep=&#39;,&#39;;
SET DecimalSep=&#39;.&#39;;
SET MoneyThousandSep=&#39;,&#39;;
SET MoneyDecimalSep=&#39;.&#39;;
SET MoneyFormat=&#39;$#,##0.00;-$#,##0.00&#39;;
SET TimeFormat=&#39;h:mm:ss TT&#39;;
SET DateFormat=&#39;M/D/YYYY&#39;;
SET TimestampFormat=&#39;M/D/YYYY h:mm:ss[.fff] TT&#39;;
SET FirstWeekDay=6;
SET BrokenWeeks=1;
SET ReferenceDay=0;
SET FirstMonthOfYear=1;
SET CollationLocale=&#39;en-US&#39;;
SET CreateSearchIndexOnReload=1;
SET MonthNames=&#39;Jan;Feb;Mar;Apr;May;Jun;Jul;Aug;Sep;Oct;Nov;Dec&#39;;
SET LongMonthNames=&#39;January;February;March;April;May;June;July;August;September;October;November;December&#39;;
SET DayNames=&#39;Mon;Tue;Wed;Thu;Fri;Sat;Sun&#39;;
SET LongDayNames=&#39;Monday;Tuesday;Wednesday;Thursday;Friday;Saturday;Sunday&#39;;
SET NumericalAbbreviation=&#39;3:k;6:M;9:G;12:T;15:P;18:E;21:Z;24:Y;-3:m;-6:μ;-9:n;-12:p;-15:f;-18:a;-21:z;-24:y&#39;;


// The Butler instance is running at this IP/port:
let vButlerHost = &#39;192.168.1.168&#39;;
let vButlerPort = &#39;8080&#39;;
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;script-section-2-sub-definitions-1&#34;&gt;Script section 2: Sub definitions&lt;/h4&gt;
&lt;p&gt;Here we define a NiceTrace sub, and a sub for retrieving key-value pairs from Butler.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// ------------------------------------------------------------
// ** Time stamped trace messages **
//
// Get nice trace lines in the reload log by calling the line with
// CALL NiceTrace(&#39;My trace message. Variable value=$(vVariableName)&#39;);
//
// Paramaters:
// vMsg                  : Message sent to reload log
// ------------------------------------------------------------
sub NiceTrace(vMsg)
    let vNow = Now(1);
    TRACE &amp;gt;&amp;gt;&amp;gt; $(vNow): $(vMsg);

    // Clear timestamp variable
    set vNow=;
end sub



// ------------------------------------------------------------
// ** Get key-value pair from a namespace **
//
// Paramaters:
// vNamespace            : Namespace in which the KV pair will be stored
// vKey                  : Key name
// vResultVarName        : Name of variable in wich value will be placed
// ------------------------------------------------------------
sub GetKeyValue(vNamespace, vKey, vResultVarName)
    LIB CONNECT TO &#39;Butler_GET&#39;;

    RestConnectorMasterTable:
    SQL SELECT 
        &amp;quot;key&amp;quot;,
        &amp;quot;value&amp;quot;
    FROM JSON (wrap on) &amp;quot;root&amp;quot;
    WITH CONNECTION (
    Url &amp;quot;http://$(vButlerHost):$(vButlerPort)/v4/keyvalues/$(vNamespace)?key=$(vKey)&amp;quot;
    );

    let $(vResultVarName) = Peek(&#39;value&#39;, 0, &#39;RestConnectorMasterTable&#39;);
    set vResultVarName=;

    DROP TABLE RestConnectorMasterTable;
end sub
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;script-section-3-read-parameter-from-kv-store&#34;&gt;Script section 3: Read parameter from KV store&lt;/h4&gt;
&lt;p&gt;Again, the code needed to interact with the key-value API is pretty compact:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// Define variable to store the retrieved parameter in
let vParam1=&#39;&#39;;

Call NiceTrace(&#39;---------------------------&#39;)
Call NiceTrace(&#39;Loading parameter from Butler key-value store.&#39;)
Call GetKeyValue(&#39;Reload chain parameter demo&#39;, &#39;Parameter 1&#39;, &#39;vParam1&#39;)

Call NiceTrace(&#39;Retrieved parameter value:&#39;)
Call NiceTrace(&#39;Namespace=&amp;quot;Reload chain parameter demo&amp;quot;, Key=&amp;quot;Parameter 1&amp;quot;, Value=&amp;quot;$(vParam1)&amp;quot;&#39;)
set vParam1=;
&lt;/code&gt;&lt;/pre&gt;
      </description>
    </item>
    
    <item>
      <title>Docs: Monitoring Butler&#39;s memory usage using Grafana</title>
      <link>/docs/examples/influxdb-metrics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/examples/influxdb-metrics/</guid>
      <description>
        
        
        &lt;p&gt;Butler 4.0 adds several new features, one being the uptime messages that can be optionally posted to the logs. Each message tells how long Butler has been running and how much memory it is using right then.&lt;/p&gt;
&lt;p&gt;This information can also, again optionally, be stored to &lt;a href=&#34;https://docs.influxdata.com/influxdb/v1.8/&#34;&gt;InfluxDB&lt;/a&gt;. InfluxDB is a database for time-series data such as measurements.&lt;br&gt;
Once in InfluxDB it&amp;rsquo;s easy to create nice monitoring charts in &lt;a href=&#34;https://grafana.com/&#34;&gt;Grafana&lt;/a&gt; or similar tools.&lt;/p&gt;
&lt;p&gt;Why spend CPU cycles and disk space on this, you may ask?&lt;/p&gt;
&lt;p&gt;Well, if you are serious about your Qlik Sense Enterprise environment, you should also be serious about your supporting tools and microservices, Butler included.&lt;/p&gt;
&lt;p&gt;Even though Butler over the years has proven to be a very stable piece of software, there is always the risk of new features misbehaving, or new bugs appearing.&lt;br&gt;
It&amp;rsquo;s thus a good idea to monitor for example how much memory (RAM) tools like Butler use over time, and alert if things go the wrong way.&lt;/p&gt;
&lt;h2 id=&#34;enable-butlers-uptime-monitor&#34;&gt;Enable Butler&amp;rsquo;s uptime monitor&lt;/h2&gt;
&lt;p&gt;Both he uptime monitor and the logging to InfluxDB must be enabled. Note that there are two settings for this. If your InfluxDB uses authentication you&amp;rsquo;ll need to enable this too in Butler&amp;rsquo;s config file.&lt;/p&gt;
&lt;p&gt;A snippet from a real-life Butler config file could look like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# Uptime monitor&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;uptimeMonitor&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;enable&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;                    &lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# Should uptime messages be written to the console and log files?&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;frequency&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;every 15 seconds    &lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# https://bunkat.github.io/later/parsers.html&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;logLevel&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;verbose              &lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# Starting at what log level should uptime messages be shown?&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;storeInInfluxdb&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;enable&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;hostIP&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;192.168.100.20&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;hostPort&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;8086&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;auth&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;enable&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# username: user_joe&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# password: joesecret&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;dbName&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;butler&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;instanceTag&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;DEV             &lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# Tag that can be used to differentiate data from multiple Butler instances&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# Default retention policy that should be created in InfluxDB when Butler creates a new database there.&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# Any data older than retention policy threshold will be purged from InfluxDB.&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;retentionPolicy&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;10d&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;duration&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;10d&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When we start Butler for the first time, it will connect to InfluxDB and if needed create a new database called &lt;code&gt;butler&lt;/code&gt;, together with a retention policy called &lt;code&gt;10d&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;butler-new-influxdb-1.png&#34; alt=&#34;alt text&#34; title=&#34;Starting Butler for the first time, InfluxDB database created&#34;&gt;&lt;/p&gt;
&lt;p&gt;Note that the only thing needed is a running InfluxDB instance. Butler creates the database in InfluxDB if needed, together with a retention policy that is defined in the Butler config file.&lt;/p&gt;
&lt;h2 id=&#34;hey-data-are-you-there&#34;&gt;Hey data, are you there?&lt;/h2&gt;
&lt;p&gt;So far so good. Let&amp;rsquo;s wait a few minutes and then verify that the InfluxDB database has received a few dataspoints. There should be data with 15 second intervals, to be precise.&lt;/p&gt;
&lt;p&gt;Use the InfluxDB command line client to connect to InfluxDB and do a manual query:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;butler-new-influxdb-2.png&#34; alt=&#34;alt text&#34; title=&#34;Manual query of Butler data in InfluxDB&#34;&gt;&lt;/p&gt;
&lt;p&gt;Indeed, there are a few data points in InfluxDB. Butler&amp;rsquo;s uptime monitor seems to be working.&lt;/p&gt;
&lt;h2 id=&#34;influxdb--grafana--&#34;&gt;InfluxDB + Grafana = 🎉📈&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s wrap up by creating a Grafana chart showing Butler memory use over time.&lt;/p&gt;
&lt;p&gt;To use the Grafana dashboard included in the Butler GitHub repository you first need to create a Grafana data source named &lt;code&gt;Butler ops metrics&lt;/code&gt;, and point it to the InfluxDB database in which Butler stores its data.&lt;/p&gt;
&lt;p&gt;Once the Grafana data source is in place and working you can import the Grafana dashboard file &lt;code&gt;Butler operational metrics.json&lt;/code&gt; (available in the docs/grafana folder in the GitHub repo).&lt;/p&gt;
&lt;p&gt;If everything works you&amp;rsquo;ll see something like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;butler-grafana-1.png&#34; alt=&#34;alt text&#34; title=&#34;Butler memory metrics in Grafana&#34;&gt;&lt;/p&gt;
&lt;p&gt;Looks like Butler is using ca 70 MByte here. This is pretty normal, memory usage usually stays well below 100 MByte, even when Butler has been running for days, weeks and months.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Start Sense tasks using MQTT</title>
      <link>/docs/examples/start-task-from-mqtt/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/examples/start-task-from-mqtt/</guid>
      <description>
        
        
        &lt;h2 id=&#34;use-mqtt-to-start-sense-tasks&#34;&gt;Use MQTT to start Sense tasks&lt;/h2&gt;
&lt;p&gt;Butler can be configured to listen to a specific MQTT topic (specified in config file property &lt;code&gt;Butler.mqttConfig.taskStartTopic&lt;/code&gt;) and use any message received in that topic as a Sense task ID, which is then started.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A Sense app, used by end users, relies on data in a source system that talks MQTT (there are &lt;em&gt;lots&lt;/em&gt; of MQTT libraries available, covering most operating systems).&lt;/li&gt;
&lt;li&gt;The data in the source system can be updated at any time.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In order to update the Sense app with data the most common approach is to schedule reloads of the Qlik Sense app at certain intervals, i.e. polling the source system.&lt;/p&gt;
&lt;p&gt;But if the source system instead posts a MQTT message on a well defined topic when new data is available, theat message will trigger the Sense app&amp;rsquo;s reload.&lt;/p&gt;
&lt;p&gt;This way the Sense app will be updated as quickly as possible after new data is availabe in the source system.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;I.e. the end user will have access to more up-to-date data, compared to the polling based solution.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;requirements-for-starting-tasks-via-mqtt&#34;&gt;Requirements for starting tasks via MQTT&lt;/h2&gt;
&lt;p&gt;These config file settings must be set up before Butler will use MQTT messages to start tasks:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Connection to MQTT broker (=server):
&lt;ul&gt;
&lt;li&gt;Butler.mqttConfig.enable: true&lt;/li&gt;
&lt;li&gt;Butler.mqttConfig.brokerHost: &lt;IP or host name of MQTT broker&gt;&lt;/li&gt;
&lt;li&gt;Butler.mqttConfig.brokerPort: &lt;Port where MQTT broker is listening&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;MQTT topics that Butler should subscribe to
&lt;ul&gt;
&lt;li&gt;Butler.mqttConfig.subscriptionRootTopic: &amp;lt;Root topic that Butler should subscribe to. Something like &lt;code&gt;qliksense/#&lt;/code&gt;&amp;gt;&lt;/li&gt;
&lt;li&gt;Butler.mqttConfig.taskStartTopic: &amp;lt;Topic used to start Sense tasks. &lt;em&gt;MUST&lt;/em&gt; be a suptopic to the root topic above!&amp;gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;seeing-is-believing&#34;&gt;Seeing is believing&lt;/h2&gt;
&lt;p&gt;The video below is available at &lt;a href=&#34;https://www.youtube.com/channel/UCpQblhippq-KfWkXEEYFHTQ&#34;&gt;Ptarmigan Labs&#39; YouTube channel&lt;/a&gt; and also in the &lt;a href=&#34;https://www.youtube.com/playlist?list=PLUuyY5OOOsz3XX5YT2QEwa7dzaBT1kOCP&#34;&gt;Butler playlist&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;embed-responsive embed-responsive-16by9&#34;&gt;
        &lt;iframe src=&#34;https://www.youtube.com/embed/5m6FPRqhN14?enablejsapi=1&#34;
                 allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Start Sense tasks using REST API</title>
      <link>/docs/examples/start-task-from-rest/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/examples/start-task-from-rest/</guid>
      <description>
        
        
        &lt;h2 id=&#34;use-butlers-rest-api-to-start-sense-tasks&#34;&gt;Use Butler&amp;rsquo;s REST API to start Sense tasks&lt;/h2&gt;
&lt;p&gt;If the Butler config file is properly set up it&amp;rsquo;s possible to start any Sense task by doing a PUT HTTP call to /v4/reloadtask/{taskId}/start endpoint.&lt;/p&gt;
&lt;p&gt;A great use case is to have upstream systems that feed Qlik Sense with data trigger a Sense task when new data is available.&lt;br&gt;
That way Sense doesn&amp;rsquo;t have to poll for new data, with less system resources used in both upstream system and in Sense.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;AND&lt;/strong&gt;&lt;/em&gt; users get the new data as quickly as possible!&lt;/p&gt;
&lt;h3 id=&#34;helper-functions-available-in-qvs-file&#34;&gt;Helper functions available in .qvs file&lt;/h3&gt;
&lt;p&gt;If you what to start reload tasks from the Sense load script that is easy.&lt;/p&gt;
&lt;p&gt;Just include the &lt;a href=&#34;https://github.com/ptarmiganlabs/butler/blob/master/docs/sense_script/butler_subs.qvs&#34;&gt;butler_subs.qvs&lt;/a&gt; file from the GitHub release package and you get (among many other things) a helper function that&amp;rsquo;s called &lt;code&gt;StartTask&lt;/code&gt;. It takes a single &lt;code&gt;taskId&lt;/code&gt; parameter,  which means that starting a reload task from an app&amp;rsquo;s load script is as simple as&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Call StartTask(&amp;lt;TaskId&amp;gt;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The general Butler 5.0 demo app &lt;code&gt;Butler 5.0 - demo app (many APIs!).qvf&lt;/code&gt; (&lt;a href=&#34;https://github.com/ptarmiganlabs/butler/tree/master/docs/sense_apps&#34;&gt;link&lt;/a&gt;) contains such a demo (and many others).&lt;/p&gt;
&lt;h2 id=&#34;requirements-for-starting-tasks-via-rest-api&#34;&gt;Requirements for starting tasks via REST API&lt;/h2&gt;
&lt;p&gt;These config file settings must be set up before Butler can use the REST API to start tasks:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Connection to Qlik Sense:
&lt;ul&gt;
&lt;li&gt;Butler.configQRS.*&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Configure REST server itself:
&lt;ul&gt;
&lt;li&gt;Butler.restServerConfig.enable: true&lt;/li&gt;
&lt;li&gt;Butler.restServerConfig.serverHost: &amp;lt;IP or hostname where Butler&amp;rsquo;s REST server is running&amp;gt;&lt;/li&gt;
&lt;li&gt;Butler.restServerConfig.serverPort: &lt;Port where Butler is exposing its REST server&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Enable the start task API endpoint
&lt;ul&gt;
&lt;li&gt;Butler.restServerEndpointsEnable.senseStartTask: true&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;seeing-is-believing&#34;&gt;Seeing is believing&lt;/h2&gt;
&lt;p&gt;The video below is available at &lt;a href=&#34;https://www.youtube.com/channel/UCpQblhippq-KfWkXEEYFHTQ&#34;&gt;Ptarmigan Labs&#39; YouTube channel&lt;/a&gt; and also in the &lt;a href=&#34;https://www.youtube.com/playlist?list=PLUuyY5OOOsz3XX5YT2QEwa7dzaBT1kOCP&#34;&gt;Butler playlist&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;embed-responsive embed-responsive-16by9&#34;&gt;
        &lt;iframe src=&#34;https://www.youtube.com/embed/5m6FPRqhN14?enablejsapi=1&#34;
                 allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Controlled and secure file system operations</title>
      <link>/docs/examples/file-copy-move-delete/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/examples/file-copy-move-delete/</guid>
      <description>
        
        
        &lt;h2 id=&#34;goal-copy-move-and-delete-files-from-sense-load-scripts&#34;&gt;Goal: Copy, move and delete files from Sense load scripts&lt;/h2&gt;
&lt;p&gt;These steps are needed to achieve the goal:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Install and configure Butler&amp;rsquo;s general settings.&lt;/li&gt;
&lt;li&gt;Add the directories in which file operations should be allowed to Butler&amp;rsquo;s config file.&lt;br&gt;
Make sure the account Butler runs under has the appropriate access to those directories.&lt;/li&gt;
&lt;li&gt;Make sure the &lt;a href=&#34;/docs/getting-started/setup/data-connections&#34;&gt;necessary Sense data connections&lt;/a&gt; exist.&lt;/li&gt;
&lt;li&gt;Call the Butler APIs directly or use the subs included in the GitHub repo to do the desired file operations.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;1-install-and-configure-butler&#34;&gt;1. Install and configure Butler&lt;/h3&gt;
&lt;p&gt;Described &lt;a href=&#34;https://butler.ptarmiganlabs.com/docs/getting-started/setup/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;2-add-approved-directories-to-butler-config-file&#34;&gt;2. Add approved directories to Butler config file&lt;/h3&gt;
&lt;p&gt;The general idea is for each file system operation (copy, move and delete) you can specify in which (or between which) directories that operation should be allowed.&lt;/p&gt;
&lt;p&gt;For example, let&amp;rsquo;s assume Butler&amp;rsquo;s config file includes this settings (note how both Linux and Windows style paths are supported):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;fileCopyApprovedDirectories&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;fromDirectory&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;/data1/qvd&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;toDirectory&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;/data2/qvd_archive&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;fromDirectory&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;e:\data3\qvd&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;toDirectory&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;e:\data4\qvd_archive&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;fromDirectory&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;e:\data5\qvd&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;toDirectory&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;e:\data6\qvd_archive&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;fileMoveApprovedDirectories&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;fromDirectory&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;/data7/qvd&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;toDirectory&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;/data8/qvd_archive&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;fromDirectory&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;e:\data9\qvd&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;toDirectory&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;e:\data10\qvd_archive&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;fileDeleteApprovedDirectories&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#000&#34;&gt;/data1/qvd_archive&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#000&#34;&gt;e:\data1\qvd_archive&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This configuration (for example) means:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Copying can be done from &lt;code&gt;e:\data3\qvd&lt;/code&gt; to &lt;code&gt;e:\data4\qvd_archive&lt;/code&gt;, but &lt;em&gt;not&lt;/em&gt; from &lt;code&gt;e:\data3\qvd&lt;/code&gt; to &lt;code&gt;e:\data6\qvd_archive&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Moving files can be done from &lt;code&gt;/data7/qvd&lt;/code&gt; to &lt;code&gt;/data8/qvd_archive&lt;/code&gt;, but &lt;em&gt;not&lt;/em&gt; from &lt;code&gt;/data7/qvd&lt;/code&gt; to &lt;code&gt;e:\data9\qvd&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Files can be deleted in the directories &lt;code&gt;/data1/qvd_archive&lt;/code&gt; and &lt;code&gt;e:\data1\qvd_archive&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3-create-sense-data-connections-used-to-call-butlers-rest-api&#34;&gt;3. Create Sense data connections used to call Butler&amp;rsquo;s REST API&lt;/h3&gt;
&lt;p&gt;Described &lt;a href=&#34;/docs/getting-started/setup/data-connections/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;4-call-the-butler-apis-or-use-convenience-subs&#34;&gt;4. Call the Butler APIs or use convenience subs&lt;/h3&gt;
&lt;p&gt;Using the provided subs is easy:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// Where is Butler running?
let vButlerHost = &#39;10.11.12.13&#39;;
let vButlerPort = 8080;

// Delete files
Call DeleteFile(&#39;/data1/qvd_archive/a.txt&#39;)
Call DeleteFile(&#39;e:\data1\qvd_archive\a.txt&#39;)

// Copy files with options overwrite-if-exists=true and keep-source-timestamp=true
Call CopyFile(&#39;/data1/qvd/a.txt&#39;, &#39;/data2/qvd_archive/a.txt&#39;, &#39;true&#39;, &#39;true&#39;)
Call CopyFile(&#39;e:\data5\qvd\a.txt&#39;, &#39;e:\data6\qvd_archive\a.txt&#39;, &#39;true&#39;, &#39;true&#39;)

// Move files with option overwrite-if-exists=true
Call MoveFile(&#39;/data7/qvd/a.txt&#39;, &#39;/data8/qvd_archive/a.txt&#39;, &#39;true&#39;)
Call MoveFile(&#39;e:\data9\qvd\a.txt&#39;, &#39;e:\data10\qvd_archive\a.txt&#39;, &#39;true&#39;)

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If you prefer to call the REST API directly, the DeleteFile sub might provide some inspiration:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// ------------------------------------------------------------
// ** Delete file **
//
// Files can only be deleted in folders (and subfolders of) directories that 
// have been approved in the Butler config file.
//
// Paramaters:
// vFile                : File to be deleted. 
// ------------------------------------------------------------
sub DeleteFile(vFile)
    let vFile = Replace(&#39;$(vFile)&#39;, &#39;\&#39;, &#39;/&#39;);
    let vFile = Replace(&#39;$(vFile)&#39;, &#39;#&#39;, &#39;%23&#39;);

    let vRequestBody = &#39;{&amp;quot;&amp;quot;deleteFile&amp;quot;&amp;quot;:&amp;quot;&amp;quot;$(vFile)&amp;quot;&amp;quot;}&#39;;

    LIB CONNECT TO &#39;Butler_POST&#39;;

    RestConnectorMasterTable:
    SQL SELECT 
    	&amp;quot;vFile&amp;quot;
    FROM JSON (wrap on) &amp;quot;root&amp;quot;
    WITH CONNECTION (
    Url &amp;quot;http://$(vButlerHost):$(vButlerPort)/v4/filedelete&amp;quot;,
    BODY &amp;quot;$(vRequestBody)&amp;quot;,
    HTTPHEADER &amp;quot;X-HTTP-Method-Override&amp;quot; &amp;quot;DELETE&amp;quot;
    );

    set vFile=;

    DROP TABLE RestConnectorMasterTable;
end sub
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Note how the HTTP operation is set using the X-HTTP-Method-Override HTTP header.&lt;/p&gt;
&lt;p&gt;This is a way to work around a limitation of Qlik&amp;rsquo;s REST connector, as it only supports GET and POST operations. The extra HTTP header tells Butler what kind of HTTP operation should &lt;em&gt;really&lt;/em&gt; be carried out.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Sense apps that explain and highlight various Butler features</title>
      <link>/docs/examples/sense-demo-apps/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/examples/sense-demo-apps/</guid>
      <description>
        
        
        
      </description>
    </item>
    
  </channel>
</rss>
